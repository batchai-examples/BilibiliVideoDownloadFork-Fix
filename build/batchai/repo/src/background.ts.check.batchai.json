{
    "has_issue": true,
    "overall_severity": "minor",
    "issues": [
        {
            "short_description": "未处理的Promise拒绝",
            "detailed_explaination": "在'open-dir-dialog'处理程序中，如果用户未选择文件夹，则返回的Promise被拒绝，但没有适当的错误处理。这可能导致未处理的Promise拒绝错误。",
            "suggestion": "在调用'open-dir-dialog'的地方添加错误处理，确保在Promise被拒绝时能够捕获并处理错误。",
            "issue_line_begin": 38,
            "issue_line_end": 42,
            "issue_reference_urls": [
                "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises#handling_errors"
            ],
            "severity": "minor",
            "severity_reason": "未处理的Promise拒绝可能导致应用程序崩溃或不稳定。"
        },
        {
            "short_description": "未处理的Promise拒绝",
            "detailed_explaination": "在'open-reload-video-dialog'处理程序中，Promise的拒绝没有被处理，这可能导致未处理的Promise拒绝错误。",
            "suggestion": "在调用'open-reload-video-dialog'的地方添加错误处理，确保在Promise被拒绝时能够捕获并处理错误。",
            "issue_line_begin": 82,
            "issue_line_end": 86,
            "issue_reference_urls": [
                "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises#handling_errors"
            ],
            "severity": "minor",
            "severity_reason": "未处理的Promise拒绝可能导致应用程序崩溃或不稳定。"
        }
    ],
    "fixed_code": "'use strict'\n\nimport { app, protocol, BrowserWindow, ipcMain, shell, dialog, Menu, globalShortcut } from 'electron'\nimport { createProtocol } from 'vue-cli-plugin-electron-builder/lib'\nimport installExtension from 'electron-devtools-installer'\nimport path from 'path'\nimport fs from 'fs-extra'\nimport { settingData } from './assets/data/default'\nimport { TaskData, SettingData } from './type'\nimport downloadVideo from './core/download'\nimport store from './core/mainStore'\nimport { STATUS } from './assets/data/status'\n\nconst got = require('got')\nconst log = require('electron-log')\n\nconst isDevelopment = process.env.NODE_ENV !== 'production'\nlet win: BrowserWindow\n\n// 设置软件系统菜单\nconst template: any = [\n  {\n    label: app.name,\n    submenu: [\n      { label: '关于', role: 'about' },\n      { label: '缩小', role: 'minimize' },\n      { label: '退出', role: 'quit' }\n    ]\n  },\n  {\n    label: '操作',\n    submenu: [\n      { label: '全选', role: 'selectAll' },\n      { label: '复制', role: 'copy' },\n      { label: '粘贴', role: 'paste' }\n    ]\n  }\n]\nconst appMenu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(appMenu)\n\n// Scheme must be registered before the app is ready\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'app', privileges: { secure: true, standard: true } }\n])\n\n// 打开浏览器\nipcMain.on('open-browser', (event, url) =\u003e {\n  shell.openExternal(url)\n})\n\n// 打开本地文件\nipcMain.on('open-path', (event, path) =\u003e {\n  shell.openPath(path)\n})\n\n// 打开选择文件夹dialog\nipcMain.handle('open-dir-dialog', () =\u003e {\n  const filePaths = dialog.showOpenDialogSync({\n    title: '选择下载地址',\n    defaultPath: app.getPath('downloads'),\n    properties: ['openDirectory']\n  })\n  if (filePaths) {\n    return Promise.resolve(filePaths[0])\n  } else {\n    return Promise.reject(new Error('not select'))\n  }\n}).catch(error =\u003e {\n  log.error(`open-dir-dialog error: ${error.message}`);\n});\n\n// 打开文件夹\nipcMain.on('open-dir', (event, list) =\u003e {\n  const fileDirs: string[] = []\n  list.forEach((id: string) =\u003e {\n    const task = store.get(`taskList.${id}`)\n    if (task \u0026\u0026 task.fileDir) fileDirs.push(task.fileDir)\n  })\n  fileDirs.forEach(dir =\u003e {\n    shell.openPath(dir)\n  })\n})\n\n// 发送http请求\nipcMain.handle('got', (event, url, option) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    got(url, option)\n      .then((res: any) =\u003e {\n        return resolve({ body: res.body, redirectUrls: res.redirectUrls, headers: res.headers })\n      })\n      .catch((error: any) =\u003e {\n        log.error(`http error: ${error.message}`)\n        return reject(error.message)\n      })\n  })\n})\n\n// 发送http请求，得到buffer\nipcMain.handle('got-buffer', (event, url, option) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    got(url, option)\n      .buffer()\n      .then((res: any) =\u003e {\n        return resolve(res)\n      })\n      .catch((error: any) =\u003e {\n        log.error(`http error: ${error.message}`)\n        return reject(error.message)\n      })\n  })\n})\n\n// electron-store 操作\nipcMain.handle('get-store', (event, path) =\u003e {\n  return Promise.resolve(store.get(path))\n})\n\nipcMain.on('set-store', (event, path, data) =\u003e {\n  store.set(path, data)\n})\n\nipcMain.on('delete-store', (event, path) =\u003e {\n  store.delete(path)\n})\n\n// 创建右键菜单\nipcMain.handle('show-context-menu', (event, type: string) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    const menuMap = {\n      download: [\n        {\n          label: '删除任务',\n          type: 'normal',\n          click: () =\u003e resolve('delete')\n        },\n        {\n          label: '重新下载',\n          type: 'normal',\n          click: () =\u003e resolve('reload')\n        },\n        {\n          label: '打开文件夹',\n          type: 'normal',\n          click: () =\u003e resolve('open')\n        },\n        {\n          label: '全选',\n          type: 'normal',\n          click: () =\u003e resolve('selectAll')\n        },\n        {\n          label: '播放视频',\n          type: 'normal',\n          click: () =\u003e resolve('play')\n        }\n      ],\n      home: [\n        { label: '全选', role: 'selectAll' },\n        { label: '复制', role: 'copy' },\n        { label: '粘贴', role: 'paste' }\n      ]\n    }\n    const template: any = menuMap[type]\n    const contextMenu = Menu.buildFromTemplate(template)\n    contextMenu.popup({ window: win })\n  })\n})\n\n// 打开删除任务dialog\nipcMain.handle('open-delete-video-dialog', (event, taskCount) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    dialog.showMessageBox(win, {\n      type: 'info',\n      title: '提示',\n      message: `当前选中${taskCount}个任务，你确定要删除吗？`,\n      checkboxLabel: '同时删除文件',\n      buttons: ['取消', '删除']\n    })\n      .then(res =\u003e {\n        return resolve(res)\n      })\n      .catch(error =\u003e {\n        return reject(error)\n      })\n  })\n})\n\n// 删除任务文件\nipcMain.handle('delete-videos', (event, filePaths) =\u003e {\n  for (const key in filePaths) {\n    fs.removeSync(filePaths[key])\n  }\n  return Promise.resolve('success')\n})\n\n// 下载任务\nipcMain.on('download-video', (event, task: TaskData) =\u003e {\n  const setting: SettingData = store.get('setting')\n  downloadVideo(task, event, setting)\n})\n\n// 获取视频大小\nipcMain.handle('get-video-size', (event, id: string) =\u003e {\n  const task = store.get(`taskList.${id}`)\n  if (task \u0026\u0026 task.filePathList) {\n    try {\n      const stat = fs.statSync(task.filePathList[0])\n      return Promise.resolve(stat.size)\n    } catch (error: any) {\n      log.error(`get-video-size error: ${error.message}`)\n    }\n    try {\n      const stat1 = fs.statSync(task.filePathList[2])\n      const stat2 = fs.statSync(task.filePathList[3])\n      return Promise.resolve(stat1.size + stat2.size)\n    } catch (error) {\n      return Promise.resolve(0)\n    }\n  }\n})\n\n// 关闭app\nipcMain.on('close-app', () =\u003e {\n  handleCloseApp()\n})\n\n// 最小化app\nipcMain.on('minimize-app', () =\u003e {\n  if (!win.isMinimized()) win.minimize()\n})\n\n// 打开删除任务dialog\nipcMain.handle('open-reload-video-dialog', (event, taskCount) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    dialog.showMessageBox(win, {\n      type: 'info',\n      title: '提示',\n      message: `当前选中${taskCount}个任务，你确定要重新下载吗？`,\n      buttons: ['取消', '下载']\n    })\n      .then(res =\u003e {\n        return resolve(res)\n      })\n      .catch(error =\u003e {\n        return reject(error)\n      })\n  })\n}).catch(error =\u003e {\n  log.error(`open-reload-video-dialog error: ${error.message}`);\n});\n\n// 保存弹幕文件\nipcMain.on('save-danmuku-file', (event, content, path) =\u003e {\n  fs.writeFile(path, content, { encoding: 'utf8' })\n})\n\nasync function createWindow () {\n  // Create the browser window.\n  win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    frame: false,\n    resizable: false,\n    maximizable: false,\n    minimizable: true,\n    titleBarStyle: 'hidden',\n    webPreferences: {\n      // Use pluginOptions.nodeIntegration, leave this alone\n      // See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info\n      nodeIntegration: (process.env\n        .ELECTRON_NODE_INTEGRATION as unknown) as boolean,\n      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  if (process.env.WEBPACK_DEV_SERVER_URL) {\n    // Load the url of the dev server if in development mode\n    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL as string)\n    if (!process.env.IS_TEST) win.webContents.openDevTools({ mode: 'detach' })\n  } else {\n    createProtocol('app')\n    // Load the index.html when not in development\n    win.loadURL('app://./index.html')\n  }\n}\n\nfunction initStore () {\n  const setting = store.get('setting')\n  const taskList = store.get('taskList')\n  if (!setting) {\n    store.set('setting', {\n      ...settingData,\n      downloadPath: app.getPath('downloads')\n    })\n  } else {\n    store.set('setting', {\n      ...settingData,\n      ...store.get('setting')\n    })\n  }\n  if (!taskList) {\n    store.set('taskList', {})\n  }\n  // 存储store\n  win.webContents.on('did-finish-load', () =\u003e {\n    // 开启应用时如果有进行中的任务都重置为失败状态\n    // 检查当前是否有下载中任务\n    const taskList = store.get('taskList')\n    for (const key in taskList) {\n      const task = taskList[key]\n      if (task.status !== STATUS.COMPLETED \u0026\u0026 task.status !== STATUS.FAIL) {\n        task.status = STATUS.FAIL\n      }\n    }\n    store.set('taskList', taskList)\n    win.webContents.send('init-store', {\n      setting: store.get('setting'),\n      taskList\n    })\n  })\n}\n\nfunction handleCloseApp () {\n  // 检查当前是否有下载中任务\n  const taskList = store.get('taskList')\n  let count = 0\n  for (const key in taskList) {\n    const task = taskList[key]\n    if (task.status !== STATUS.COMPLETED \u0026\u0026 task.status !== STATUS.FAIL) {\n      count += 1\n      task.status = STATUS.FAIL\n      // task.progress = 100\n    }\n  }\n  dialog.showMessageBox(win, {\n    type: 'info',\n    title: '提示',\n    message: count ? `当前有${count}个任务正在下载中，关闭软件会导致任务下载失败，是否继续关闭软件？` : '是否关闭应用程序？',\n    buttons: ['取消', '关闭']\n  })\n    .then(res =\u003e {\n      if (count) store.set('taskList', taskList)\n      if (res.response === 1) win.destroy()\n    })\n    .catch(error =\u003e {\n      console.log(error)\n    })\n}\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () =\u003e {\n  app.quit()\n})\n\napp.on('activate', () =\u003e {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) createWindow()\n})\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', async () =\u003e {\n  if (isDevelopment \u0026\u0026 !process.env.IS_TEST) {\n    // Install Vue Devtools\n    try {\n      await installExtension('nhdogjmejiglipccpnnnanhbledajbpd')\n    } catch (e: any) {\n      console.error('Vue Devtools failed to install:', e.toString())\n    }\n  }\n  // 创建渲染进程\n  createWindow()\n  // 初始化store\n  initStore()\n  // 监听win close\n  win.on('close', event =\u003e {\n    console.log('on win close')\n    event.preventDefault()\n    handleCloseApp()\n  })\n  // 添加快捷键\n  globalShortcut.register('CommandOrControl+Shift+L', () =\u003e {\n    const focusWin = BrowserWindow.getFocusedWindow()\n    if (focusWin \u0026\u0026 focusWin.webContents.isDevToolsOpened()) {\n      focusWin.webContents.closeDevTools()\n    } else if (focusWin \u0026\u0026 !focusWin.webContents.isDevToolsOpened()) {\n      focusWin.webContents.openDevTools({ mode: 'detach' })\n    }\n  })\n})\n\n// Exit cleanly on request from parent process in development mode.\nif (isDevelopment) {\n  if (process.platform === 'win32') {\n    process.on('message', (data) =\u003e {\n      if (data === 'graceful-exit') {\n        app.quit()\n      }\n    })\n  } else {\n    process.on('SIGTERM', () =\u003e {\n      app.quit()\n    })\n  }\n}\n",
    "original_code": "'use strict'\n\nimport { app, protocol, BrowserWindow, ipcMain, shell, dialog, Menu, globalShortcut } from 'electron'\nimport { createProtocol } from 'vue-cli-plugin-electron-builder/lib'\nimport installExtension from 'electron-devtools-installer'\nimport path from 'path'\nimport fs from 'fs-extra'\nimport { settingData } from './assets/data/default'\nimport { TaskData, SettingData } from './type'\nimport downloadVideo from './core/download'\nimport store from './core/mainStore'\nimport { STATUS } from './assets/data/status'\n\nconst got = require('got')\nconst log = require('electron-log')\n\nconst isDevelopment = process.env.NODE_ENV !== 'production'\nlet win: BrowserWindow\n\n// 设置软件系统菜单\nconst template: any = [\n  {\n    label: app.name,\n    submenu: [\n      { label: '关于', role: 'about' },\n      { label: '缩小', role: 'minimize' },\n      { label: '退出', role: 'quit' }\n    ]\n  },\n  {\n    label: '操作',\n    submenu: [\n      { label: '全选', role: 'selectAll' },\n      { label: '复制', role: 'copy' },\n      { label: '粘贴', role: 'paste' }\n    ]\n  }\n]\nconst appMenu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(appMenu)\n\n// Scheme must be registered before the app is ready\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'app', privileges: { secure: true, standard: true } }\n])\n\n// 打开浏览器\nipcMain.on('open-browser', (event, url) =\u003e {\n  shell.openExternal(url)\n})\n\n// 打开本地文件\nipcMain.on('open-path', (event, path) =\u003e {\n  shell.openPath(path)\n})\n\n// 打开选择文件夹dialog\nipcMain.handle('open-dir-dialog', () =\u003e {\n  const filePaths = dialog.showOpenDialogSync({\n    title: '选择下载地址',\n    defaultPath: app.getPath('downloads'),\n    properties: ['openDirectory']\n  })\n  if (filePaths) {\n    return Promise.resolve(filePaths[0])\n  } else {\n    return Promise.reject(new Error('not select'))\n  }\n})\n\n// 打开文件夹\nipcMain.on('open-dir', (event, list) =\u003e {\n  const fileDirs: string[] = []\n  list.forEach((id: string) =\u003e {\n    const task = store.get(`taskList.${id}`)\n    if (task \u0026\u0026 task.fileDir) fileDirs.push(task.fileDir)\n  })\n  fileDirs.forEach(dir =\u003e {\n    shell.openPath(dir)\n  })\n})\n\n// 发送http请求\nipcMain.handle('got', (event, url, option) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    got(url, option)\n      .then((res: any) =\u003e {\n        return resolve({ body: res.body, redirectUrls: res.redirectUrls, headers: res.headers })\n      })\n      .catch((error: any) =\u003e {\n        log.error(`http error: ${error.message}`)\n        return reject(error.message)\n      })\n  })\n})\n\n// 发送http请求，得到buffer\nipcMain.handle('got-buffer', (event, url, option) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    got(url, option)\n      .buffer()\n      .then((res: any) =\u003e {\n        return resolve(res)\n      })\n      .catch((error: any) =\u003e {\n        log.error(`http error: ${error.message}`)\n        return reject(error.message)\n      })\n  })\n})\n\n// electron-store 操作\nipcMain.handle('get-store', (event, path) =\u003e {\n  return Promise.resolve(store.get(path))\n})\n\nipcMain.on('set-store', (event, path, data) =\u003e {\n  store.set(path, data)\n})\n\nipcMain.on('delete-store', (event, path) =\u003e {\n  store.delete(path)\n})\n\n// 创建右键菜单\nipcMain.handle('show-context-menu', (event, type: string) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    const menuMap = {\n      download: [\n        {\n          label: '删除任务',\n          type: 'normal',\n          click: () =\u003e resolve('delete')\n        },\n        {\n          label: '重新下载',\n          type: 'normal',\n          click: () =\u003e resolve('reload')\n        },\n        {\n          label: '打开文件夹',\n          type: 'normal',\n          click: () =\u003e resolve('open')\n        },\n        {\n          label: '全选',\n          type: 'normal',\n          click: () =\u003e resolve('selectAll')\n        },\n        {\n          label: '播放视频',\n          type: 'normal',\n          click: () =\u003e resolve('play')\n        }\n      ],\n      home: [\n        { label: '全选', role: 'selectAll' },\n        { label: '复制', role: 'copy' },\n        { label: '粘贴', role: 'paste' }\n      ]\n    }\n    const template: any = menuMap[type]\n    const contextMenu = Menu.buildFromTemplate(template)\n    contextMenu.popup({ window: win })\n  })\n})\n\n// 打开删除任务dialog\nipcMain.handle('open-delete-video-dialog', (event, taskCount) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    dialog.showMessageBox(win, {\n      type: 'info',\n      title: '提示',\n      message: `当前选中${taskCount}个任务，你确定要删除吗？`,\n      checkboxLabel: '同时删除文件',\n      buttons: ['取消', '删除']\n    })\n      .then(res =\u003e {\n        return resolve(res)\n      })\n      .catch(error =\u003e {\n        return reject(error)\n      })\n  })\n})\n\n// 删除任务文件\nipcMain.handle('delete-videos', (event, filePaths) =\u003e {\n  for (const key in filePaths) {\n    fs.removeSync(filePaths[key])\n  }\n  return Promise.resolve('success')\n})\n\n// 下载任务\nipcMain.on('download-video', (event, task: TaskData) =\u003e {\n  const setting: SettingData = store.get('setting')\n  downloadVideo(task, event, setting)\n})\n\n// 获取视频大小\nipcMain.handle('get-video-size', (event, id: string) =\u003e {\n  const task = store.get(`taskList.${id}`)\n  if (task \u0026\u0026 task.filePathList) {\n    try {\n      const stat = fs.statSync(task.filePathList[0])\n      return Promise.resolve(stat.size)\n    } catch (error: any) {\n      log.error(`get-video-size error: ${error.message}`)\n    }\n    try {\n      const stat1 = fs.statSync(task.filePathList[2])\n      const stat2 = fs.statSync(task.filePathList[3])\n      return Promise.resolve(stat1.size + stat2.size)\n    } catch (error) {\n      return Promise.resolve(0)\n    }\n  }\n})\n\n// 关闭app\nipcMain.on('close-app', () =\u003e {\n  handleCloseApp()\n})\n\n// 最小化app\nipcMain.on('minimize-app', () =\u003e {\n  if (!win.isMinimized()) win.minimize()\n})\n\n// 打开删除任务dialog\nipcMain.handle('open-reload-video-dialog', (event, taskCount) =\u003e {\n  return new Promise((resolve, reject) =\u003e {\n    dialog.showMessageBox(win, {\n      type: 'info',\n      title: '提示',\n      message: `当前选中${taskCount}个任务，你确定要重新下载吗？`,\n      buttons: ['取消', '下载']\n    })\n      .then(res =\u003e {\n        return resolve(res)\n      })\n      .catch(error =\u003e {\n        return reject(error)\n      })\n  })\n})\n\n// 保存弹幕文件\nipcMain.on('save-danmuku-file', (event, content, path) =\u003e {\n  fs.writeFile(path, content, { encoding: 'utf8' })\n})\n\nasync function createWindow () {\n  // Create the browser window.\n  win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    frame: false,\n    resizable: false,\n    maximizable: false,\n    minimizable: true,\n    titleBarStyle: 'hidden',\n    webPreferences: {\n      // Use pluginOptions.nodeIntegration, leave this alone\n      // See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info\n      nodeIntegration: (process.env\n        .ELECTRON_NODE_INTEGRATION as unknown) as boolean,\n      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  if (process.env.WEBPACK_DEV_SERVER_URL) {\n    // Load the url of the dev server if in development mode\n    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL as string)\n    if (!process.env.IS_TEST) win.webContents.openDevTools({ mode: 'detach' })\n  } else {\n    createProtocol('app')\n    // Load the index.html when not in development\n    win.loadURL('app://./index.html')\n  }\n}\n\nfunction initStore () {\n  const setting = store.get('setting')\n  const taskList = store.get('taskList')\n  if (!setting) {\n    store.set('setting', {\n      ...settingData,\n      downloadPath: app.getPath('downloads')\n    })\n  } else {\n    store.set('setting', {\n      ...settingData,\n      ...store.get('setting')\n    })\n  }\n  if (!taskList) {\n    store.set('taskList', {})\n  }\n  // 存储store\n  win.webContents.on('did-finish-load', () =\u003e {\n    // 开启应用时如果有进行中的任务都重置为失败状态\n    // 检查当前是否有下载中任务\n    const taskList = store.get('taskList')\n    for (const key in taskList) {\n      const task = taskList[key]\n      if (task.status !== STATUS.COMPLETED \u0026\u0026 task.status !== STATUS.FAIL) {\n        task.status = STATUS.FAIL\n      }\n    }\n    store.set('taskList', taskList)\n    win.webContents.send('init-store', {\n      setting: store.get('setting'),\n      taskList\n    })\n  })\n}\n\nfunction handleCloseApp () {\n  // 检查当前是否有下载中任务\n  const taskList = store.get('taskList')\n  let count = 0\n  for (const key in taskList) {\n    const task = taskList[key]\n    if (task.status !== STATUS.COMPLETED \u0026\u0026 task.status !== STATUS.FAIL) {\n      count += 1\n      task.status = STATUS.FAIL\n      // task.progress = 100\n    }\n  }\n  dialog.showMessageBox(win, {\n    type: 'info',\n    title: '提示',\n    message: count ? `当前有${count}个任务正在下载中，关闭软件会导致任务下载失败，是否继续关闭软件？` : '是否关闭应用程序？',\n    buttons: ['取消', '关闭']\n  })\n    .then(res =\u003e {\n      if (count) store.set('taskList', taskList)\n      if (res.response === 1) win.destroy()\n    })\n    .catch(error =\u003e {\n      console.log(error)\n    })\n}\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () =\u003e {\n  app.quit()\n})\n\napp.on('activate', () =\u003e {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) createWindow()\n})\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', async () =\u003e {\n  if (isDevelopment \u0026\u0026 !process.env.IS_TEST) {\n    // Install Vue Devtools\n    try {\n      await installExtension('nhdogjmejiglipccpnnnanhbledajbpd')\n    } catch (e: any) {\n      console.error('Vue Devtools failed to install:', e.toString())\n    }\n  }\n  // 创建渲染进程\n  createWindow()\n  // 初始化store\n  initStore()\n  // 监听win close\n  win.on('close', event =\u003e {\n    console.log('on win close')\n    event.preventDefault()\n    handleCloseApp()\n  })\n  // 添加快捷键\n  globalShortcut.register('CommandOrControl+Shift+L', () =\u003e {\n    const focusWin = BrowserWindow.getFocusedWindow()\n    if (focusWin \u0026\u0026 focusWin.webContents.isDevToolsOpened()) {\n      focusWin.webContents.closeDevTools()\n    } else if (focusWin \u0026\u0026 !focusWin.webContents.isDevToolsOpened()) {\n      focusWin.webContents.openDevTools({ mode: 'detach' })\n    }\n  })\n})\n\n// Exit cleanly on request from parent process in development mode.\nif (isDevelopment) {\n  if (process.platform === 'win32') {\n    process.on('message', (data) =\u003e {\n      if (data === 'graceful-exit') {\n        app.quit()\n      }\n    })\n  } else {\n    process.on('SIGTERM', () =\u003e {\n      app.quit()\n    })\n  }\n}\n",
    "path": "src/background.ts",
    "model_usage_metrics": {
        "Duration": 62025706417,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}