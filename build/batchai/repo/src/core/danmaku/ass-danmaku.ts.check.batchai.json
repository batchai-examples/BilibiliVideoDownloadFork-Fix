{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "import { BasicDanmakuData, Danmaku } from './danmaku-data'\nimport { DanmakuType } from './danmaku-type'\n\nexport type Duration = (danmaku: Danmaku) =\u003e number\nexport type BlockTypes = (DanmakuType | 'color')[]\nexport interface AssDanmakuData extends BasicDanmakuData {\n  typeTag: string\n  colorTag: string\n  endTime: string\n}\nexport interface FontStyles {\n  [size: number]: string\n}\nexport interface Resolution {\n  x: number\n  y: number\n}\n\nexport class AssDanmaku extends Danmaku {\n  typeTag: string\n  colorTag: string\n  endTime: string\n  constructor ({\n    content, time, type, fontSize, color, typeTag, colorTag, endTime\n  }: AssDanmakuData) {\n    super({\n      content, time, type, fontSize, color\n    })\n    this.typeTag = typeTag\n    this.colorTag = colorTag\n    this.endTime = endTime\n  }\n\n  text (fontStyles: FontStyles) {\n    const style = fontStyles[this.fontSize] ? fontStyles[this.fontSize] : fontStyles['25']\n    const styleNameArray = style.match(/Style:(.*?),/)\n    const styleName = styleNameArray ? styleNameArray[1].trim() : ''\n    return `Dialogue: 0,${this.time},${this.endTime},${styleName},,0,0,0,,{${this.typeTag}${this.colorTag}}${this.content}`\n  }\n}\nexport class AssDanmakuDocument {\n  danmakus: AssDanmaku[]\n  title: string\n  fontStyles: FontStyles\n  blockTypes: BlockTypes\n  resolution: Resolution\n  constructor (\n    danmakus: AssDanmaku[],\n    title: string,\n    fontStyles: FontStyles,\n    blockTypes: BlockTypes,\n    resolution: Resolution\n  ) {\n    this.danmakus = danmakus\n    this.title = title\n    this.fontStyles = fontStyles\n    this.blockTypes = blockTypes\n    this.resolution = resolution\n  }\n\n  generateAss () {\n    const meta = `\n[Script Info]\n; Script generated by Bilibili Evolved Danmaku Converter\n; https://github.com/the1812/Bilibili-Evolved/\nTitle: ${this.title}\nScriptType: v4.00+\nPlayResX: ${this.resolution.x}\nPlayResY: ${this.resolution.y}\nTimer: 10.0000\nWrapStyle: 2\nScaledBorderAndShadow: no\n\n[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n${Object.values(this.fontStyles).join('\\n')}\n\n[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n                `.trim()\n    return `${meta}\\n${this.danmakus\n      .map(it =\u003e it.text(this.fontStyles))\n      .filter(it =\u003e it !== '').join('\\n')}`\n  }\n}\n",
    "original_code": "import { BasicDanmakuData, Danmaku } from './danmaku-data'\nimport { DanmakuType } from './danmaku-type'\n\nexport type Duration = (danmaku: Danmaku) =\u003e number\nexport type BlockTypes = (DanmakuType | 'color')[]\nexport interface AssDanmakuData extends BasicDanmakuData {\n  typeTag: string\n  colorTag: string\n  endTime: string\n}\nexport interface FontStyles {\n  [size: number]: string\n}\nexport interface Resolution {\n  x: number\n  y: number\n}\n\nexport class AssDanmaku extends Danmaku {\n  typeTag: string\n  colorTag: string\n  endTime: string\n  constructor ({\n    content, time, type, fontSize, color, typeTag, colorTag, endTime\n  }: AssDanmakuData) {\n    super({\n      content, time, type, fontSize, color\n    })\n    this.typeTag = typeTag\n    this.colorTag = colorTag\n    this.endTime = endTime\n  }\n\n  text (fontStyles: FontStyles) {\n    const style = fontStyles[this.fontSize] ? fontStyles[this.fontSize] : fontStyles['25']\n    const styleNameArray = style.match(/Style:(.*?),/)\n    const styleName = styleNameArray ? styleNameArray[1].trim() : ''\n    return `Dialogue: 0,${this.time},${this.endTime},${styleName},,0,0,0,,{${this.typeTag}${this.colorTag}}${this.content}`\n  }\n}\nexport class AssDanmakuDocument {\n  danmakus: AssDanmaku[]\n  title: string\n  fontStyles: FontStyles\n  blockTypes: BlockTypes\n  resolution: Resolution\n  constructor (\n    danmakus: AssDanmaku[],\n    title: string,\n    fontStyles: FontStyles,\n    blockTypes: BlockTypes,\n    resolution: Resolution\n  ) {\n    this.danmakus = danmakus\n    this.title = title\n    this.fontStyles = fontStyles\n    this.blockTypes = blockTypes\n    this.resolution = resolution\n  }\n\n  generateAss () {\n    const meta = `\n[Script Info]\n; Script generated by Bilibili Evolved Danmaku Converter\n; https://github.com/the1812/Bilibili-Evolved/\nTitle: ${this.title}\nScriptType: v4.00+\nPlayResX: ${this.resolution.x}\nPlayResY: ${this.resolution.y}\nTimer: 10.0000\nWrapStyle: 2\nScaledBorderAndShadow: no\n\n[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n${Object.values(this.fontStyles).join('\\n')}\n\n[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n                `.trim()\n    return `${meta}\\n${this.danmakus\n      .map(it =\u003e it.text(this.fontStyles))\n      .filter(it =\u003e it !== '').join('\\n')}`\n  }\n}\n",
    "path": "src/core/danmaku/ass-danmaku.ts",
    "model_usage_metrics": {
        "Duration": 13441643953,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}